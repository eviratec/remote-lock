#!/usr/bin/env node
/**
 * https://github.com/eviratec/remote-lock
 * Copyright (c) 2017 Callan Peter Milne
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
 * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
 * FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
 * OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */
"use strict";

const v4uuid = require("uuid/v4");

const PKG = require("../package.json");
const _c = PKG.config.constants;

const express = require("express");
const bodyParser = require("body-parser");
const jsonParser = bodyParser.json();
const app = express();

const configPath = require("../src/configPath");
const readJsonDb = require("../src/readJsonDb");

const DeviceRepo = require('../src/DeviceRepo');
const CommandRepo = require('../src/CommandRepo');

const CMD_STATE_QUEUED = "2-queued";
const CMD_STATE_INPROGRESS = "1-inprogress";
const CMD_STATE_STOPPED = "0-stopped";

(function () {

  let deviceList = new DeviceRepo();
  let commandList = new CommandRepo();

  deviceList.addDevices(readJsonDb(configPath(_c.DEVICE_DB)));
  commandList.addCommands(readJsonDb(configPath(_c.COMMAND_DB)));

  app.get("/info", function (req, res) {
    res.send({
      package: {
        name: PKG.name,
        version: PKG.version,
        description: PKG.description,
      },
      devices: deviceList,
    });
  });

  app.get("/device/uuid(:deviceUuid)", function (req, res) {
    let device;
    let deviceUuid = stripRoundBraces(req.params.deviceUuid);
    if (!deviceUuid || deviceUuid.length !== 36) {
      res.sendStatus(400);
      return;
    }
    device = deviceList.getDeviceByUuid(deviceUuid);
    res.send(device);
  });

  app.post("/incoming/commands", jsonParser, function (req, res) {
    let command;
    command = Object.assign({}, req.body, {
      uuid: v4uuid(),
      state: CMD_STATE_QUEUED,
      received: Date.now(),
    });
    commandList.addCommand(command);
    res.redirect(303, `/command/uuid(${command.uuid})`);
  });

  app.get("/command/uuid(:commandUuid)", function (req, res) {
    let command;
    let commandUuid = stripRoundBraces(req.params.commandUuid);
    if (!commandUuid || commandUuid.length !== 36) {
      res.sendStatus(400);
      return;
    }
    command = commandList.getCommandByUuid(commandUuid);
    res.send(command);
  });

  app.use(express.static("src/pub"));
  app.use("/bower_components", express.static("bower_components"));

  app.listen(3000, function () {
    console.log("Example app listening on port 3000!")
  });

  // parse application/x-www-form-urlencoded
  app.use(bodyParser.urlencoded({ extended: false }));

  // parse application/json
  app.use(bodyParser.json());

  function stripRoundBraces (target) {
    return target.replace(/^\(|\)$/g, "");
  }

})();
